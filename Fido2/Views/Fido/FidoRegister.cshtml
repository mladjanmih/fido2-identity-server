@using Fido2IdentityServer.Controllers.Fido;
@inject IJsonHelper Json;
@model RegisterViewModel

<h1>Register</h1>

<p>Please use your FIDO authenticator...</p>

@section Scripts
{
    <script>
        coerceToArrayBuffer = function (thing, name) {
            if (typeof thing === "string") {
                // base64url to base64
                thing = thing.replace(/-/g, "+").replace(/_/g, "/");

                // base64 to Uint8Array
                var str = window.atob(thing);
                var bytes = new Uint8Array(str.length);
                for (var i = 0; i < str.length; i++) {
                    bytes[i] = str.charCodeAt(i);
                }
                thing = bytes;
            }

            // Array to Uint8Array
            if (Array.isArray(thing)) {
                thing = new Uint8Array(thing);
            }

            // Uint8Array to ArrayBuffer
            if (thing instanceof Uint8Array) {
                thing = thing.buffer;
            }

            // error if none of the above worked
            if (!(thing instanceof ArrayBuffer)) {
                throw new TypeError("could not coerce '" + name + "' to ArrayBuffer");
            }

            return thing;
        };
        coerceToBase64Url = function (thing) {
            // Array or ArrayBuffer to Uint8Array
            if (Array.isArray(thing)) {
                thing = Uint8Array.from(thing);
            }

            if (thing instanceof ArrayBuffer) {
                thing = new Uint8Array(thing);
            }

            // Uint8Array to base64
            if (thing instanceof Uint8Array) {
                var str = "";
                var len = thing.byteLength;

                for (var i = 0; i < len; i++) {
                    str += String.fromCharCode(thing[i]);
                }
                thing = window.btoa(str);
            }

            if (typeof thing !== "string") {
                throw new Error("could not coerce to string");
            }

            // base64 to base64url
            // NOTE: "=" at the end of challenge is optional, strip it off here
            thing = thing.replace(/\+/g, "-").replace(/\//g, "_").replace(/=*$/g, "");

            return thing;
        };
    </script>
    <script>
        var makeCredentialOptions = @Html.Raw(Json.Serialize(Model.CredentialCreateOptions));
        console.log("Credential Options Object", makeCredentialOptions);

        makeCredentialOptions.challenge = coerceToArrayBuffer(makeCredentialOptions.challenge);
        makeCredentialOptions.user.id = coerceToArrayBuffer(makeCredentialOptions.user.id);
        makeCredentialOptions.excludeCredentials = makeCredentialOptions.excludeCredentials.map((c) => {
            c.id = coerceToArrayBuffer(c.id);
            return c;
        });

        if (makeCredentialOptions.authenticatorSelection.authenticatorAttachment === null)
            makeCredentialOptions.authenticatorSelection.authenticatorAttachment = undefined;

        console.log("Credential Options Formatted", makeCredentialOptions);

        let newCredential;
        try {
            newCredential = navigator.credentials.create({
                publicKey: makeCredentialOptions
            }).then((newCredential) => {

                console.log("PublicKeyCredential Created", newCredential);

                let attestationObject = new Uint8Array(newCredential.response.attestationObject);
                let clientDataJSON = new Uint8Array(newCredential.response.clientDataJSON);
                let rawId = new Uint8Array(newCredential.rawId);

                const data = {
                    id: newCredential.id,
                    rawId: coerceToBase64Url(rawId),
                    type: newCredential.type,
                    extensions: newCredential.getClientExtensionResults(),
                    response: {
                        AttestationObject: coerceToBase64Url(attestationObject),
                        clientDataJson: coerceToBase64Url(clientDataJSON)
                    }
                };

                $.ajax({
                    url: '/Fido/RegisterCallback',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    success: function (success) {
                        if (success)
                            window.location.href = "/Fido/RegisterSuccess";
                        else
                            window.location.href = "/Fido/RegisterFailed";
                    }

                });
            },
              (err) => { window.location.href = "/Fido/RegisterFailed"; });
        } catch (e) {
            var msg = "Could not create credentials in browser. Probably because the username is already registered with your authenticator. Please change username or authenticator."
            console.error(msg, e);
            showErrorAlert(msg, e);
            window.location.href = "/Fido/RegisterFailed";
        }      
    </script>
}
